package publicfaucet

import (
	"log/slog"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"

	"github.com/comiccoin-network/monorepo/cloud/comiccoin/internal/common/httperror"
	"github.com/comiccoin-network/monorepo/cloud/comiccoin/config/constants"
	"github.com/comiccoin-network/monorepo/cloud/comiccoin/internal/publicfaucet/domain"
	uc_federatedidentity "github.com/comiccoin-network/monorepo/cloud/comiccoin/internal/publicfaucet/usecase/federatedidentity"
)

type PublicFaucetProfileGetService interface {
	Execute(sessCtx mongo.SessionContext) (*domain.FederatedIdentity, error)
}

type publicfaucetProfileGetServiceImpl struct {
	logger             *slog.Logger
	federatedidentityGetByIDUseCase uc_federatedidentity.FederatedIdentityGetByIDUseCase
}

func NewPublicFaucetProfileGetService(
	logger *slog.Logger,
	uc1 uc_federatedidentity.FederatedIdentityGetByIDUseCase,
) PublicFaucetProfileGetService {
	return &publicfaucetProfileGetServiceImpl{logger, uc1}
}

func (s *publicfaucetProfileGetServiceImpl) Execute(sessCtx mongo.SessionContext) (*domain.FederatedIdentity, error) {
	// Extract from our session the following data.
	federatedidentityID := sessCtx.Value(constants.SessionFederatedIdentityID).(primitive.ObjectID)

	// Lookup the federatedidentity in our database, else return a `400 Bad Request` error.
	u, err := s.federatedidentityGetByIDUseCase.Execute(sessCtx, federatedidentityID)
	if err != nil {
		s.logger.Error("database error", slog.Any("err", err))
		return nil, err
	}
	if u == nil {
		s.logger.Warn("federatedidentity does not exist validation error")
		return nil, httperror.NewForBadRequestWithSingleField("id", "does not exist")
	}
	return u, nil
}
