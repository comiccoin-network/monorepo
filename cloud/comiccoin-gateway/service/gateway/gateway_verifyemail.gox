package gateway

import (
	"log/slog"
	"time"

	"go.mongodb.org/mongo-driver/mongo"

	"github.com/comiccoin-network/monorepo/cloud/comiccoin-gateway/common/httperror"
	"github.com/comiccoin-network/monorepo/cloud/comiccoin-gateway/common/kmutexutil"
	"github.com/comiccoin-network/monorepo/cloud/comiccoin-gateway/config/constants"
	"github.com/comiccoin-network/monorepo/cloud/comiccoin-gateway/domain"
	uc_federatedidentity "github.com/comiccoin-network/monorepo/cloud/comiccoin-gateway/usecase/federatedidentity"
)

type GatewayVerifyEmailService interface {
	Execute(sessCtx mongo.SessionContext, req *GatewayVerifyRequestIDO) (*GatwayVerifyResponseIDO, error)
}

type gatewayVerifyEmailServiceImpl struct {
	logger                           *slog.Logger
	kmutex                           kmutexutil.KMutexProvider
	federatedidentityGetByVerificationCodeUseCase uc_federatedidentity.FederatedIdentityGetByVerificationCodeUseCase
	federatedidentityUpdateUseCase                uc_federatedidentity.FederatedIdentityUpdateUseCase
}

func NewGatewayVerifyEmailService(
	logger *slog.Logger,
	kmutex kmutexutil.KMutexProvider,
	uc1 uc_federatedidentity.FederatedIdentityGetByVerificationCodeUseCase,
	uc2 uc_federatedidentity.FederatedIdentityUpdateUseCase,
) GatewayVerifyEmailService {
	return &gatewayVerifyEmailServiceImpl{logger, kmutex, uc1, uc2}
}

type GatewayVerifyRequestIDO struct {
	Code string `json:"code"`
}

type GatwayVerifyResponseIDO struct {
	Message  string `json:"message"`
	FederatedIdentityRole int8   `bson:"federatedidentity_role" json:"federatedidentity_role"`
}

func (s *gatewayVerifyEmailServiceImpl) Execute(sessCtx mongo.SessionContext, req *GatewayVerifyRequestIDO) (*GatwayVerifyResponseIDO, error) {
	s.kmutex.Acquire(req.Code)
	defer func() {
		s.kmutex.Release(req.Code)
	}()

	// // Extract from our session the following data.
	// sessionID := sessCtx.Value(constants.SessionID).(string)

	res := &GatwayVerifyResponseIDO{}

	// Lookup the federatedidentity in our database, else return a `400 Bad Request` error.
	u, err := s.federatedidentityGetByVerificationCodeUseCase.Execute(sessCtx, req.Code)
	if err != nil {
		s.logger.Error("database error", slog.Any("err", err))
		return nil, err
	}
	if u == nil {
		s.logger.Warn("federatedidentity does not exist validation error")
		return nil, httperror.NewForBadRequestWithSingleField("code", "does not exist")
	}

	//TODO: Handle expiry dates.

	// Extract from our session the following data.
	// federatedidentityID := sessCtx.Value(constants.SessionFederatedIdentityID).(primitive.ObjectID)
	ipAddress, _ := sessCtx.Value(constants.SessionIPAddress).(string)

	// Verify the federatedidentity.
	u.WasEmailVerified = true
	// ou.ModifiedByFederatedIdentityID = federatedidentityID
	u.ModifiedAt = time.Now()
	// ou.ModifiedByName = fmt.Sprintf("%s %s", ou.FirstName, ou.LastName)
	u.ModifiedFromIPAddress = ipAddress
	if err := s.federatedidentityUpdateUseCase.Execute(sessCtx, u); err != nil {
		s.logger.Error("update error", slog.Any("err", err))
		return nil, err
	}

	//
	// Send notification based on federatedidentity role
	//

	switch u.Role {
	case domain.FederatedIdentityRoleCustomer:
		{
			res.Message = "Thank you for verifying. You may log in now to get started!"
			s.logger.Debug("customer federatedidentity verified")
			break
		}
	default:
		{
			res.Message = "Thank you for verifying. You may log in now to get started!"
			s.logger.Debug("unknown federatedidentity verified")
			break
		}
	}
	res.FederatedIdentityRole = u.Role

	return res, nil
}
